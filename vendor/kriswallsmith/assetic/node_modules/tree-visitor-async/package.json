{
  "_args": [
    [
      "tree-visitor-async@*",
      "/var/www/html/will/vendor/kriswallsmith/assetic/node_modules/tree-transformer-async"
    ]
  ],
  "_from": "tree-visitor-async@*",
  "_id": "tree-visitor-async@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/tree-visitor-async",
  "_npmUser": {
    "email": "curvedmark@gmail.com",
    "name": "curvedmark"
  },
  "_npmVersion": "1.3.5",
  "_phantomChildren": {},
  "_requested": {
    "name": "tree-visitor-async",
    "raw": "tree-visitor-async@*",
    "rawSpec": "*",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "/tree-transformer-async"
  ],
  "_resolved": "https://registry.npmjs.org/tree-visitor-async/-/tree-visitor-async-1.0.0.tgz",
  "_shasum": "4bad42bb144dbf516a46e48eca3b6f84881c2106",
  "_shrinkwrap": null,
  "_spec": "tree-visitor-async@*",
  "_where": "/var/www/html/will/vendor/kriswallsmith/assetic/node_modules/tree-transformer-async",
  "author": {
    "email": "curvedmark@gmail.com",
    "name": "Glen Huang"
  },
  "bugs": {
    "url": "https://github.com/curvedmark/tree-visitor-async/issues"
  },
  "dependencies": {
    "promise-now": "1.x",
    "tree-visitor": "*"
  },
  "description": "Visit nodes in the tree asynchronously and sequentially. Supports promises.",
  "devDependencies": {
    "mocha": "1.x",
    "mocha-as-promised": "1.x"
  },
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "dist": {
    "shasum": "4bad42bb144dbf516a46e48eca3b6f84881c2106",
    "tarball": "https://registry.npmjs.org/tree-visitor-async/-/tree-visitor-async-1.0.0.tgz"
  },
  "homepage": "https://github.com/curvedmark/tree-visitor-async#readme",
  "keywords": [
    "ast",
    "async",
    "compiler",
    "tree",
    "visitor"
  ],
  "license": "MIT",
  "main": "lib/VisitorAsync.js",
  "maintainers": [
    {
      "name": "curvedmark",
      "email": "curvedmark@gmail.com"
    }
  ],
  "name": "tree-visitor-async",
  "optionalDependencies": {},
  "readme": "# Tree Visitor Async\n\nVisit nodes in the tree asynchronously and sequentially. Support promises.\n\nAsynchronous version of [Tree Visitor](https://github.com/curvedmark/tree-visitor). Actions can return a promise and `.visit()` returns a promise.\n\n## API\n\n```javascript\nvar fs = require('fs');\nvar Q = require('q');\nvar VisitorAsync = require('tree-visitor-async');\nvar nodes = [\n\t{ type: 'import', value: 'path/to/file1' },\n\t{ type: 'import', value: 'path/to/file2' },\n];\n\nfunction MyVisitorAsync() {}\nMyVisitorAsync.prototype = new VisitorAsync();\n\nMyVisitorAsync.prototype.visit_import = function (importNode) {\n\tvar deferred = Q.defer();\n\tfs.readFile(importNode.value, 'utf8', deferred.makeNodeResolver());\n\treturn deferred.promise.then(function (content) {\n\t\tconsole.log(content);\n\t});\n};\n\nnew MyVisitorAsync().visit(nodes).then(function () {\n\tconsole.log('done');\n});\n```\n\nMethods are passed to the returned promise as fulfill callbacks. So, for example, if a method throws an error or returns a rejected promise, subsequent nodes won't be visited.\n\n`this` keyword in the fulfill & reject callbacks refers the created visitor object (e.g., `new MyVisitorAsync()` in the previous example).",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/curvedmark/tree-visitor-async.git"
  },
  "scripts": {
    "test": "mocha --bail"
  },
  "version": "1.0.0"
}
