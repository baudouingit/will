{
  "_args": [
    [
      "tree-visitor@*",
      "/var/www/html/will/vendor/kriswallsmith/assetic/node_modules/tree-transformer"
    ]
  ],
  "_from": "tree-visitor@*",
  "_id": "tree-visitor@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/tree-visitor",
  "_npmUser": {
    "email": "curvedmark@gmail.com",
    "name": "curvedmark"
  },
  "_npmVersion": "1.3.5",
  "_phantomChildren": {},
  "_requested": {
    "name": "tree-visitor",
    "raw": "tree-visitor@*",
    "rawSpec": "*",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "/roole-evaluator",
    "/tree-transformer",
    "/tree-visitor-async"
  ],
  "_resolved": "https://registry.npmjs.org/tree-visitor/-/tree-visitor-1.0.0.tgz",
  "_shasum": "f8be6eebbbd8c1dab2ae17fda965b79c31a1af44",
  "_shrinkwrap": null,
  "_spec": "tree-visitor@*",
  "_where": "/var/www/html/will/vendor/kriswallsmith/assetic/node_modules/tree-transformer",
  "author": {
    "email": "curvedmark@gmail.com",
    "name": "Glen Huang"
  },
  "bugs": {
    "url": "https://github.com/curvedmark/tree-visitor/issues"
  },
  "dependencies": {},
  "description": "Visit nodes in the tree",
  "devDependencies": {
    "mocha": "1.x"
  },
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "dist": {
    "shasum": "f8be6eebbbd8c1dab2ae17fda965b79c31a1af44",
    "tarball": "https://registry.npmjs.org/tree-visitor/-/tree-visitor-1.0.0.tgz"
  },
  "homepage": "https://github.com/curvedmark/tree-visitor#readme",
  "keywords": [
    "ast",
    "compiler",
    "tree",
    "visitor"
  ],
  "license": "MIT",
  "main": "lib/Visitor.js",
  "maintainers": [
    {
      "name": "curvedmark",
      "email": "curvedmark@gmail.com"
    }
  ],
  "name": "tree-visitor",
  "optionalDependencies": {},
  "readme": "# Tree Visitor\n\nVisit nodes in the tree.\n\n## Example\n\nVisit a single node:\n\n```javascript\nvar Visitor = require('tree-visitor');\nvar node = { type: 'number', value: 1 };\n\nfunction MyVisitor() {}\nMyVisitor.prototype = new Visitor();\n\nMyVisitor.prototype.visit_number = function (number) {\n\tconsole.log(number.value);\n};\n\nvar myVisitor = new MyVisitor();\nmyVisitor.visit(node); // 1\n```\n\nVisit an array of nodes:\n\n```javascript\nvar Visitor = require('tree-visitor');\nvar nodes = [\n\t{ type: 'number', value: 1 },\n\t{ type: 'string', value: 'abc', quote: '\"' }\n];\n\nfunction MyVisitor() {}\nMyVisitor.prototype = new Visitor();\n\nMyVisitor.prototype.visit_number = function (number) {\n\tconsole.log(number.value);\n};\n\nMyVisitor.prototype.visit_string = function (string) {\n\tconsole.log(string.quote + string.value + string.quote);\n};\n\nvar myVisitor = new MyVisitor();\nmyVisitor.visit(nodes); // 1 \"abc\"\n```\n\nVisit nested nodes:\n\n```javascript\nvar Visitor = require('tree-visitor');\nvar number = { type: 'number', value: 1 };\nvar string = { type: 'string', value: 'abc' };\nvar expression = {\n\t\ttype: 'binaryExpression',\n\t\toperator: '+',\n\t\tleft: number,\n\t\tright: string\n};\n\nfunction MyVisitor() {}\nMyVisitor.prototype = new Visitor();\n\nMyVisitor.prototype.visit_binaryExpression = function (binaryExpression) {\n\tthis.visit(binaryExpression.left);\n\tconsole.log(binaryExpression.operator);\n\tthis.visit(binaryExpression.right);\n};\n\nMyVisitor.prototype.visit_number = function (number) {\n\tconsole.log(number.value);\n};\n\nMyVisitor.prototype.visit_string = function (string) {\n\tconsole.log(string.quote + string.value + string.quote);\n};\n\nvar myVisitor = new MyVisitor();\nmyVisitor.visit(expression); // 1 + \"abc\"\n```\n\nOne method to rule them all:\n\n```javascript\nvar Visitor = require('tree-visitor');\n\nvar nodes = [\n\t{ type: 'number', value: 1 },\n\t{ type: 'string', value: 'abc', quote: '\"' }\n];\n\nfunction MyVisitor() {}\nMyVisitor.prototype = new Visitor();\n\nMyVisitor.prototype.visit_node = function (node) {\n\tconsole.log(node.value);\n};\n\nvar myVisitor = new MyVisitor();\nmyVisitor.visit(nodes); // 1 abc\n```\n\n## API\n\n```javascript\nvar Visitor = require('tree-visitor');\n\nfunction MyVisitor() {}\nMyVisitor.prototype = new Visitor();\n\nMyVisitor.prototype.visit_nodeType = function (node) {};\n\nvar myVisitor = new MyVisitor();\nmyVisitor.visit(node);\n```\n\n`Visitor` should be \"subclassed\" by a constructor, the new constructor should have methods like `.visit_nodeType()`, and the node being visited should have a `type` property. If the value of `type` and the string after `.visit_` matches, the node will be passed to that method when calling `.visit(node)`.\n\nEither a single node (any js object), or an array of nodes can be visited. In the latter case, the nodes are visited sequentially.\n\n`.visit_node()` is a special method, if the node being visited doesn't have a corresponding method, it's passed to `.visit_node()`. If it does, however, it will not be passed to this method.\n\nNodes that are not a plain object (e.g., string, `null`, etc) or don't have a `type` property are ignored (i.e., it's not passed to any method, not even `.visit_node()`).\n\nWhen visiting a single node, the returning value of `.visit(node)` is the returning value of the corresponding method, or the node itself if it doesn't have a corresponding method.\n\nWhen visiting an array of nodes, the returning value of `.visit(nodes)` is the original array (i.e., `nodes`).",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/curvedmark/tree-visitor.git"
  },
  "scripts": {
    "test": "mocha --bail"
  },
  "version": "1.0.0"
}
